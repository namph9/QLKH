<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:p="http://www.springframework.org/schema/p" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="
           http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
           http://www.springframework.org/schema/context
           http://www.springframework.org/schema/context/spring-context-3.0.xsd
           http://www.springframework.org/schema/tx
                   http://www.springframework.org/schema/tx/spring-tx-3.0.xsd">



        <!--Cac thong so ve database-->
    <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource">
        <property name="driverClassName" value="com.mysql.jdbc.Driver" />
        <property name="url" value="jdbc:mysql://127.0.0.1:3306/warehouse?characterEncoding=UTF-8" />
        <property name="username" value="root" />
        <property name="password" value="root" />
<!--        <property name="url" value="jdbc:mysql://127.2.91.130:3306/warehouse?characterEncoding=UTF-8" />
        <property name="username" value="adminmB1Hqpg" />
        <property name="password" value="aVCj3XxPHU79" />-->
    </bean>


	<!-- Define the datasource; define the session factory, we need specify 
		the packagesToScan property, this property will scan all entity annotated 
		class. define the context component-scan basepackage, this will scan all 
		@Repository annotated Class -->	

    <bean id="sessionFactory"
		class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean">
        <property name="dataSource" ref="dataSource" />
        <property name="configLocation" value="classpath:hibernate.cfg.xml" />
    </bean>

    <bean id="transactionManager"
		class="org.springframework.orm.hibernate3.HibernateTransactionManager">
        <property name="sessionFactory" ref="sessionFactory" />
    </bean>

	<!-- Container Configuration: The IOC container configuration xml file is 
		shown below,The container has the <context:component-scan> element and <context:annotation-config/> 
		<context:annotation-config/> used to intimate the beans of this IOC container 
		are annotation supported. By pass the base path of the beans as the value 
		of the base-package attribute of context:component-scan element, we can detect 
		the beans and registering their bean definitions automatically without lots 
		of overhead. The value of base-package attribute is fully qualified package 
		name of the bean classes. We can pass more than one package names by comma 
		separated -->    

<!--	<context:annotation-config />
	<context:component-scan base-package="com.football.mainpage" />

    <tx:annotation-driven transaction-manager="transactionManager" />-->

    <!-- This will ensure that hibernate or jpa exceptions are automatically 
    translated into Spring's generic DataAccessException hierarchy for those 
    classes annotated with Repository -->

    <!--	<bean
    class="org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor" />-->

    <!--Quan ly template hibernate-->
    <bean id="hibernateTemplate" class="org.springframework.orm.hibernate3.HibernateTemplate">
        <property name="sessionFactory" ref="sessionFactory" />
        <property name="maxResults" value="3000" />
    </bean>
    
    
    <!--Abstract basic dung de extends-->
    <bean id="basicDAO" abstract="true" p:hibernateTemplate-ref="hibernateTemplate" 
          class="com.namph.dao.BasicDAO"/>
    <!--All DAO BEAN-->
    <bean id="khoDao" class="com.namph.dao.impl.KhoDaoImpl" parent="basicDAO" />
    <bean id="importDao" class="com.namph.dao.impl.ImportDaoImpl" parent="basicDAO" />
    <bean id="importDetailDao" class="com.namph.dao.impl.ImportDetailDaoImpl" parent="basicDAO" />
    <bean id="typeDao" class="com.namph.dao.impl.TypeDaoImpl" parent="basicDAO" />
    <bean id="productDao" class="com.namph.dao.impl.ProductDaoImpl" parent="basicDAO" />
    <bean id="exportDao" class="com.namph.dao.impl.ExportDaoImpl" parent="basicDAO" />
    <bean id="tonKhoDao" class="com.namph.dao.impl.TonKhoDaoImpl" parent="basicDAO" />
    <bean id="dailyDao" class="com.namph.dao.impl.DaiLyDaoImpl" parent="basicDAO" />
    <bean id="thuDao" class="com.namph.dao.impl.ThuDaoImpl" parent="basicDAO" />
    <bean id="userDao" class="com.namph.dao.impl.UserDaoImpl" parent="basicDAO" />
    
    
    <!--ALL SERVICE BEAN-->
    <bean name="khoService" class="com.namph.service.impl.KhoServiceImpl">
        <property name="khoDao" ref="khoDao"/>
    </bean>
    <bean name="importService" class="com.namph.service.impl.ImportServiceImpl">
        <property name="importDao" ref="importDao"/>
    </bean>
    <bean name="importDetailService" class="com.namph.service.impl.ImportDetailServiceImpl">
        <property name="importDetailDao" ref="importDetailDao"/>
    </bean>
    <bean name="typeService" class="com.namph.service.impl.TypeServiceImpl">
        <property name="typeDao" ref="typeDao"/>
    </bean>
    <bean name="productService" class="com.namph.service.impl.ProductServiceImpl">
        <property name="productDao" ref="productDao"/>
    </bean>
    <bean name="exportService" class="com.namph.service.impl.ExportServiceImpl">
        <property name="exportDao" ref="exportDao"/>
    </bean>
    <bean name="tonKhoService" class="com.namph.service.impl.TonKhoServiceImpl">
        <property name="tonKhoDao" ref="tonKhoDao"/>
    </bean>
    <bean name="dailyService" class="com.namph.service.impl.DaiLyServiceImpl">
        <property name="dailyDao" ref="dailyDao"/>
    </bean>
    <bean name="thuService" class="com.namph.service.impl.ThuServiceImpl">
        <property name="thuDao" ref="thuDao"/>
    </bean>
    <bean name="userService" class="com.namph.service.impl.UserServiceImpl">
        <property name="userDao" ref="userDao"/>
    </bean>
</beans>